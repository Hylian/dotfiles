fzf-cd-widget() {
  local cmd="${FZF_ALT_C_COMMAND:-"command find -L . -mindepth 1 \\( -path '*/.*' -o -fstype 'sysfs' -o -fstype 'devfs' -o -fstype 'devtmpfs' -o -fstype 'proc' \\) -prune \
    -o -type d -print 2> /dev/null | cut -b3-"}"
  setopt localoptions pipefail no_aliases 2> /dev/null
  local dir="$(eval "$cmd" | FZF_DEFAULT_OPTS="--height ${FZF_TMUX_HEIGHT:-40%} --reverse --scheme=path --bind=ctrl-z:ignore ${FZF_DEFAULT_OPTS-} ${FZF_ALT_C_OPTS-}" $(__fzfcmd) +m)"
  if [[ -z "$dir" ]]; then
    zle redisplay
    return 0
  fi
  zle push-line # Clear buffer. Auto-restored on next prompt.
  BUFFER="builtin cd -- ${(q)dir}"
  zle accept-line
  local ret=$?
  unset dir # ensure this doesn't end up appearing in prompt expansion
  zle reset-prompt
  return $ret
}

# fzf to cd to a directory
cd-fzf-helper() {
  local dirlist=$(eza -1 -D -s modified -r $2)
  dirlist="$dirlist\n.."
  local fzfret=$(echo $dirlist | fzf --ansi \
    --height '40%' \
    --color prompt:green \
    --layout=reverse \
    --prompt 'cd> ' \
    --header "${2:2}" \
    --preview "eza -G --color=always --group-directories-first -s modified ./$2/{1}" \
    --preview-window 'right,50%' \
    --bind 'pgup:preview-half-page-up' \
    --bind 'pgdn:preview-half-page-down' \
    --bind 'ctrl-delete:clear-query' \
    --bind 'btab:become(echo up)' \
    --bind 'esc:become(echo up)' \
    --bind '.:become(echo up)' \
    --bind 'tab:become(echo continue {1})' \
    --bind 'enter:become(echo done {1})' \
    --bind 'space:become(echo done .)')

  local ret=( ${=fzfret} )
  dir="$2/${ret[2]}"

  if [[ ${ret[1]} = "continue" ]]; then
    local numdirs=$(fd -I -d 1 -td --base-directory $dir | wc -l)
    if [[ $numdirs = "0" ]]; then
      # No-Op
      #cd-fzf-helper $1 $2

      # Just open the dir
      finaldir=$dir
    else
      cd-fzf-helper $(( $1 + 1 )) $dir
    fi
  elif [[ ${ret[1]} = "up" ]]; then
    local parentdir=$(dirname $dir)
    if [[ $parentdir = "." ]]; then
      finaldir=""
    else
      cd-fzf-helper $(( $1 - 1 )) $(dirname $dir)
    fi
  elif [[ ${ret[1]} = "cancel" ]]; then
    finaldir=""
  elif [[ ${ret[1]} = "done" ]]; then
    finaldir=$dir
  fi
}
zle     -N            cd-fzf-helper

cd-fzf() {
  local finaldir=""
  cd-fzf-helper 0 '.'

  if [[ -z "$finaldir" || $finaldir = "" ]]; then
    return 0
  fi

  zle push-line
  BUFFER="builtin cd -- ${(q)finaldir}"
  zle accept-line
  local ret=$?
  zle reset-prompt
  return $ret

  #echo "\n"
  #_z_cd ${finaldir}
  #zle reset-prompt
}
zle     -N            cd-fzf
bindkey -M emacs '^g' cd-fzf
bindkey -M vicmd '^g' cd-fzf
bindkey -M viins '^g' cd-fzf

# zoxide + fzf
zoxide-fzf() {
  zle push-input
  _ZO_FZF_OPTS="--exact --no-sort --bind=ctrl-z:ignore,btab:up,tab:down --cycle --keep-right --height=45% --info=inline --layout=reverse --tabstop=1 --exit-0 --preview-window=down --preview 'eza -G --color=always --group-directories-first -s modified {2..}'" __zoxide_zi
  zle reset-prompt
}
zle     -N            zoxide-fzf
bindkey -M emacs '^j' zoxide-fzf
bindkey -M vicmd '^j' zoxide-fzf
bindkey -M viins '^j' zoxide-fzf

zoxide-fzf-curdir() {
  zle push-input
  _ZO_FZF_OPTS="--exact --no-sort --bind=ctrl-z:ignore,btab:up,tab:down --cycle --keep-right --height=45% --info=inline --layout=reverse --tabstop=1 --exit-0 --preview-window=down --preview 'eza -G --color=always --group-directories-first -s modified {2..}'" __zoxide_zi "${PWD}" "/"
  zle reset-prompt
}
zle     -N            zoxide-fzf-curdir
bindkey -M emacs '^k' zoxide-fzf-curdir
bindkey -M vicmd '^k' zoxide-fzf-curdir
bindkey -M viins '^k' zoxide-fzf-curdir

# rg + fzf
rg-fzf() {
BAT_BIN="bat"
if (( $+commands[batcat] )); then
  BAT_BIN="batcat"
fi
RG_PREFIX="rg --column --line-number --no-heading --color=always --smart-case "
INITIAL_QUERY="${*:-}"
local path=$(: | fzf --ansi --disabled --query "$INITIAL_QUERY" \
    --color prompt:green \
    --prompt "rg> " \
    --header "" \
    --bind "start:reload:$RG_PREFIX {q}" \
    --bind "change:change-header()+reload:sleep 0.1; $RG_PREFIX {q} || true" \
    --bind "alt-c:change-header([C])+reload:$RG_PREFIX -tc {q} || true" \
    --bind "alt-v:change-header([C++])+reload:$RG_PREFIX -tcpp {q} || true" \
    --bind "alt-m:change-header([Makefile])+reload:$RG_PREFIX -tmake {q} || true" \
    --bind "alt-a:change-header([Android])+reload:$RG_PREFIX -tandroid {q} || true" \
    --delimiter : \
    --preview "$BAT_BIN --color=always {1} --highlight-line {2}" \
    --preview-window 'up,40%,border-bottom,+{2}+3/3,~3' \
    --bind 'enter:become(echo {1} +{2})' \
    --bind 'ctrl-space:execute(nvim {1} +{2})' \
    --bind "tab:execute($BAT_BIN --color=always {1} --highlight-line {2} | less)")

if [[ $path ]]; then
  zle push-input
  BUFFER="nvim $path"
  zle accept-line
fi

local ret=$?
zle reset-prompt
return $ret
}
zle     -N            rg-fzf
bindkey -M emacs '^f' rg-fzf
bindkey -M vicmd '^f' rg-fzf
bindkey -M viins '^f' rg-fzf

# vim + fzf
vim-fzf() {
BAT_BIN="bat"
if (( $+commands[batcat] )); then
  BAT_BIN="batcat"
fi
local path=$(fd --type f | fzf --ansi \
    --color prompt:green \
    --prompt "nvim> " \
    --header "" \
    --height '40%' \
    --preview "$BAT_BIN --color=always {1}" \
    --preview-window 'right,50%' \
    --bind 'enter:become(echo {1})' \
    --bind 'pgup:preview-half-page-up' \
    --bind 'pgdn:preview-half-page-down' \
    --bind 'ctrl-delete:clear-query')

if [[ $path ]]; then
  zle push-input
  BUFFER="nvim $path"
  zle accept-line
fi

local ret=$?
zle reset-prompt
return $ret
}
zle     -N            vim-fzf
bindkey -M emacs '^v' vim-fzf
bindkey -M vicmd '^v' vim-fzf
bindkey -M viins '^v' vim-fzf

# git pick commit
git-pick-fzf() {
  LBUFFER+="$(fzf-git-pick-commit) "
}

zle     -N            git-pick-fzf
bindkey -M emacs '^l' git-pick-fzf
bindkey -M vicmd '^l' git-pick-fzf
bindkey -M viins '^l' git-pick-fzf

# vim: ft=zsh
