if (( $+commands[nvim] )); then
  alias vim='nvim'
  alias v='vim'
  export VISUAL=nvim
  export EDITOR="$VISUAL"
fi

if (( $+commands[rg] )); then
  alias rgc='rg -tc'
fi

if (( $+commands[eza] )); then
  alias ls='eza'
  alias ll='eza -l -a'
  function chpwd() {
    if [[ $(pwd) != /google* ]] then
      emulate -L zsh
      eza -s modified --reverse
    fi
  }
elif (( $+commands[exa] )); then
  alias ls='exa'
  alias ll='exa -l -a'
  function chpwd() {
    if [[ $(pwd) != /google* ]] then
      emulate -L zsh
      exa -s modified --reverse
    fi
  }
fi

if (( $+commands[batcat] )); then
  alias bat='batcat'
  alias cat='batcat'
elif (( $+commands[bat] )); then
  alias cat='bat'
fi

if (( $+commands[chezmoi] )); then
  alias cz='chezmoi'
fi

if (( $+commands[imv-wayland] )); then
  alias imv='imv-wayland'
fi

if (( $+commands[sccache] )); then
  export RUSTC_WRAPPER=sccache
fi

if (( $+commands[tag] )); then
  export TAG_SEARCH_PROG=rg
  tag() { command tag "$@"; source ${TAG_ALIAS_FILE:-/tmp/tag_aliases} 2>/dev/null }
  alias trg=tag
fi

if (( $+commands[fdfind] )); then
  alias fd=fdfind
fi

if (( $+commands[fd] )); then
  export FZF_DEFAULT_COMMAND="fd"
  export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
fi


alias cdg='cd $(git rev-parse --show-toplevel 2>/dev/null)'
alias cdr='cd $(repo --show-toplevel 2>/dev/null)'
uproot() {
  cd ..

  local git_top=$(git rev-parse --show-toplevel 2>/dev/null)
  local repo_top=$(repo --show-toplevel 2>/dev/null)
  local chosen_top

  if [[ -n "$git_top" && -n "$repo_top" ]]; then
    if (( ${#git_top} > ${#repo_top} )); then
      chosen_top="$git_top"
    else
      chosen_top="$repo_top"
    fi
  elif [[ -n "$git_top" ]]; then
    chosen_top="$git_top"
  elif [[ -n "$repo_top" ]]; then
    chosen_top="$repo_top"
  fi

  # cd to the chosen directory
  if [[ -n "$chosen_top" ]]; then
    cd "$chosen_top"
  fi
}

alias zellij-kill='zellij ls -s | grep -v persist | xargs -L1 zellij k'

# Git
alias gc='git checkout'
alias gau='git add -u'
alias gcm='git commit -m'
alias gs='git status'
alias gl='git log --pretty --oneline --graph'
alias gll='git log --pretty --graph'
alias gri='git rebase -i'
alias grid='git rebase -i develop'
alias grim='git rebase -i origin/main'
alias grih='git rebase -i HEAD~2'
alias grhh='git reset --hard HEAD'
alias gsu='git submodule update --init --recursive'
alias gp='git pull'
alias gb='git checkout -b'
alias gd='git diff'
alias gdh='git diff HEAD~'
alias gcp='git cherry-pick'
alias gitrootdir='git rev-parse --show-toplevel'
alias stgs='stg status'
alias stgss='stg series'
alias stgr='stg refresh'
alias stgri='stg refresh --index'
alias stguc='stg uncommit'
alias stgc='stg commit'

alias rm='rm -i'

gpush() {
  git push origin $(git log --pretty=oneline | fzf | cut -d ' ' -f1):refs/for/main
}

gpushwip() {
  git push origin $(git log --pretty=oneline | fzf | cut -d ' ' -f1):refs/for/main%wip --no-verify
}

gamendto() {
  local target_commit=$(git log --pretty=oneline | fzf | cut -d ' ' -f1)
  SHA=`git rev-parse "$target_commit"`; git stash -k && git commit --fixup "$SHA" && GIT_SEQUENCE_EDITOR=true git rebase --interactive --autosquash "$SHA^" && git stash pop;
}

gsync() {
  git fetch origin main && \
  git stash -k && \
  stg rebase --merged origin/main && \
  git submodule --quiet sync && \
  git submodule update --init -j 20
}

fzf-git-branch() {
  git rev-parse HEAD > /dev/null 2>&1 || return

  git branch --color=always --all --sort=-committerdate |
    rg -v HEAD |
    fzf --height 50% --ansi --no-multi --preview-window right:65% \
        --preview 'git log -n 50 --color=always --date=short --pretty="format:%C(auto)%cd %h%d %s" $(sed "s/.* //" <<< {})' |
    sed "s/.* //"
}

fzf-git-checkout() {
  git rev-parse HEAD > /dev/null 2>&1 || return

  local branch

  branch=$(fzf-git-branch)
  if [[ "$branch" = "" ]]; then
    echo "No branch selected."
    return
  fi

  # If branch name starts with 'remotes/' then it is a remote branch. By
  # using --track and a remote branch name, it is the same as:
  # git checkout -b branchName --sort=-committerdate --track origin/branchName
  if [[ "$branch" = 'remotes/'* ]]; then
    git checkout --track $branch
  else
    git checkout $branch;
  fi
}

fzf-git-pick-commit() {
  git rev-parse HEAD > /dev/null 2>&1 || return

  local filter
  if [ -n $@ ] && [ -f $@ ]; then
    filter="-- $@"
  fi

  local gitlog=(
    git log
    --color=always
    --abbrev=7
    --format='%C(auto)%h %an %C(blue)%s %C(yellow)%cr'
    $@
  )

  local fzf=(
    fzf
    --ansi --no-sort --reverse --tiebreak=index
    --preview "f() { set -- \$(echo -- \$@ | grep -o '[a-f0-9]\{7\}'); [ \$# -eq 0 ] || git show --color=always \$1 --pretty=full $filter | delta --true-color always -n --no-gitconfig; }; f {}"
    --bind "pgup:preview-half-page-up"
    --bind "pgdn:preview-half-page-down"
    --bind "ctrl-u:preview-half-page-up,ctrl-d:preview-half-page-down"
    --bind "ctrl-q:abort"
    --bind "enter:accept"
    --preview-window=right:65%
  )

  echo $($gitlog | $fzf | rg -o '[a-f0-9]{7}')
}

fzf-git-difftool() {
  local commit
  commit=$(fzf-git-pick-commit)
  if [[ ! -z "$commit" ]] && git difftool $commit~1 $commit
}

fzf-git-difftool-to() {
  local commit
  commit=$(fzf-git-pick-commit)
  if [[ ! -z "$commit" ]] && git difftool $commit
}

fzf-git-show() {
  local commit
  commit=$(fzf-git-pick-commit)
  if [[ ! -z "$commit" ]] && git show $commit --pretty
}

fzf-git-unstage() {
  git restore --staged $(git diff --cached --name-only | fzf -m)
  git status
}

fzf-git-add() {
  git add $(git diff --name-only | fzf -m)
  git status
}

alias gbranch='fzf-git-branch'
alias gcheckout='fzf-git-checkout'
alias gdiff='fzf-git-difftool'
alias gdiffto='fzf-git-difftool-to'
alias gshow='fzf-git-show'
alias gunstage='fzf-git-unstage'
alias gadd='fzf-git-add'

stg-squashpush() {
  local origbranch && \
  origbranch=$(stg branch) && \
  echo "Deleting branch: stg-temp" && \
  stg branch --delete --force stg-temp
  echo "Switching branch: stg-temp" && \
  stg branch --clone stg-temp && \
  local patches && \
  patches=( $(stg series --no-description --no-prefix | \
            fzf -m --preview-window right:65% --preview 'stg show --color=always -p {}') ) && \
  echo "Squashing patches: $patches" && \
  stg squash $patches && \
  echo "Committing squashed patch" && \
  stg commit ${patches[0]} && \
  echo "Deleting all remaining patches" && \
  stg branch --cleanup --force && \
  echo "Pushing to Gerrit..." && \
  git push origin HEAD:refs/for/main

  echo "Switching branch: $origbranch" && \
  stg branch $origbranch && \
  echo "Deleting branch: stg-temp" && \
  stg branch --delete --force stg-temp
}

# Helpers

h2d(){
  echo "ibase=16; $(echo $@ | tr a-f A-F)"|bc
}

d2h(){
  echo "obase=16; $@"|bc
}

h2b(){
  echo "ibase=16; obase=2; $(echo $@ | tr a-f A-F)" | bc
}

# vim: ft=zsh
